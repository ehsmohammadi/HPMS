using System;
using System.Collections.Generic;
using System.Linq;
using MITD.Core.Builders;
using MITD.Domain.Model;


namespace MITD.PMS.Domain.Model.Units
{

    public class UnitInquiryConfigurationItem : EntityWithDbId<long, UnitInquiryConfigurationItemId>, IEntity<UnitInquiryConfigurationItem>
    {
        private readonly Unit _unit;
        private readonly byte[] rowVersion;

        #region Properties

        public virtual Unit Unit
        {
            get { return _unit; }
        }

        public virtual UnitInquiryConfigurationItemId Id
        {
            get { return id; }
        }

        

        private readonly bool isAutoGenerated;
        public virtual bool IsAutoGenerated
        {
            get { return isAutoGenerated; }
        }

        private bool isPermitted;
        public virtual bool IsPermitted
        {
            get { return isPermitted; }
        }

        //private UnitLevel inquirerJobPositionLevel;
        //public virtual UnitLevel InquirerJobPositionLevel
        //{
        //    get { return inquirerJobPositionLevel; }
        //}



        #endregion

        #region Constructors
        // for Or mapper
        protected UnitInquiryConfigurationItem()
        {

        }

        public UnitInquiryConfigurationItem(UnitInquiryConfigurationItemId unitInquiryConfigurationItemId,
                                                   Unit unit,
                                                   bool isAutoGenerated,
                                                   bool isPermitted)//,
         //   JobPositionLevel inquirerJobPositionLevel)
        {
            if (unitInquiryConfigurationItemId == null)
                throw new ArgumentNullException("unitInquiryConfigurationItemId");
            id = unitInquiryConfigurationItemId;

            
            this.isAutoGenerated = isAutoGenerated;
            this.isPermitted = isPermitted;

            if (unit == null)
                throw new ArgumentNullException("unit");
            this._unit = unit;

         //   this.inquirerJobPositionLevel = inquirerJobPositionLevel;


        }

        #endregion

        #region IEntity Member
        public virtual bool SameIdentityAs(UnitInquiryConfigurationItem other)
        {
            return (other != null)&& Id.Equals(other.Id);


        }

        public virtual void SetPermitted(bool value)
        {
            isPermitted = value;
        }

        #endregion

        #region Object Override
        public override bool Equals(object obj)
        {
            if (this == obj) return true;
            if (obj == null || GetType() != obj.GetType()) return false;
            var other = (UnitInquiryConfigurationItem)obj;
            return SameIdentityAs(other);
        }
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }

        public override string ToString()
        {
            return Id.ToString();
        }
        #endregion
    }
}
