using System;
using System.Collections.Generic;
using System.Linq;
using MITD.Core.Builders;
using MITD.Domain.Model;
using MITD.PMS.Domain.Model.Jobs;
using MITD.PMS.Domain.Model.JobPositions;

namespace MITD.PMS.Domain.Model.JobPositions
{

    public class JobPositionInquiryConfigurationItem : EntityWithDbId<long, JobPositionInquiryConfigurationItemId>, IEntity<JobPositionInquiryConfigurationItem>
    {
        private readonly JobPosition jobPosition;
        private readonly byte[] rowVersion;

        #region Properties

        public virtual JobPosition JobPosition
        {
            get { return jobPosition; }
        }

        public virtual JobPositionInquiryConfigurationItemId Id
        {
            get { return id; }
        }

        

        private readonly bool isAutoGenerated;
        public virtual bool IsAutoGenerated
        {
            get { return isAutoGenerated; }
        }

        private bool isPermitted;
        public virtual bool IsPermitted
        {
            get { return isPermitted; }
        }

        private JobPositionLevel inquirerJobPositionLevel;
        public virtual JobPositionLevel InquirerJobPositionLevel
        {
            get { return inquirerJobPositionLevel; }
        }



        #endregion

        #region Constructors
        // for Or mapper
        protected JobPositionInquiryConfigurationItem()
        {

        }

        public JobPositionInquiryConfigurationItem(JobPositionInquiryConfigurationItemId jobPositionInquiryConfigurationItemId,
                                                   JobPosition jobPosition,
                                                   bool isAutoGenerated,
                                                   bool isPermitted,
            JobPositionLevel inquirerJobPositionLevel)
        {
            if (jobPositionInquiryConfigurationItemId == null)
                throw new ArgumentNullException("jobPositionInquiryConfigurationItemId");
            id = jobPositionInquiryConfigurationItemId;

            
            this.isAutoGenerated = isAutoGenerated;
            this.isPermitted = isPermitted;
            
            if (jobPosition == null)
                throw new ArgumentNullException("jobPosition");
            this.jobPosition = jobPosition;

            this.inquirerJobPositionLevel = inquirerJobPositionLevel;


        }

        #endregion

        #region IEntity Member
        public virtual bool SameIdentityAs(JobPositionInquiryConfigurationItem other)
        {
            return (other != null)&& Id.Equals(other.Id);


        }

        public virtual void SetPermitted(bool value)
        {
            isPermitted = value;
        }

        #endregion

        #region Object Override
        public override bool Equals(object obj)
        {
            if (this == obj) return true;
            if (obj == null || GetType() != obj.GetType()) return false;
            var other = (JobPositionInquiryConfigurationItem)obj;
            return SameIdentityAs(other);
        }
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }

        public override string ToString()
        {
            return Id.ToString();
        }
        #endregion
    }
}
