using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using Castle.Core.Internal;
using MITD.Core;
using MITD.PMS.Presentation.Contracts;
using MITD.PMS.Presentation.PeriodManagementApp;
using MITD.PMS.Presentation.PeriodManagementApp.Views;
using MITD.Presentation;

namespace MITD.PMS.Presentation.Logic
{
    public class JobInPeriodListVM :WorkspaceViewModel, IEventHandler<UpdateJobInPeriodListArgs>
    {
        #region Fields
        private PagedSortableCollectionView<JobInPeriodDto> jobInPeriods;
        private IPeriodController periodController;
        private readonly IPMSController appController;
        private IPeriodServiceWrapper jobInPeriodService;
        private JobInPeriodDto selectedJobInPeriod;  
        private CommandViewModel addJobInPeriod;
        private ReadOnlyCollection<DataGridCommandViewModel> jobInPeriodCommands;
        private PeriodDto period;

        #endregion

        #region Properties

        public PeriodDto Period
        {
            get { return period; }
            set { this.SetField(p => p.Period, ref period, value); }
        }

        public PagedSortableCollectionView<JobInPeriodDto> JobInPeriods
        {
            get { return jobInPeriods; }
            set
            {
                this.SetField(p => p.JobInPeriods, ref jobInPeriods, value);
            }
        }

        public JobInPeriodDto SelectedJobInPeriod
        {
            get { return selectedJobInPeriod; }
            set
            {
                this.SetField(p => p.SelectedJobInPeriod, ref selectedJobInPeriod, value);
            }
        }

        public CommandViewModel AddJobInPeriod
        {
            get
            {
                if (addJobInPeriod == null)
                {
                    addJobInPeriod = new CommandViewModel("افزودن شغل به دوره",
                        new DelegateCommand(() => periodController.ShowJobInPeriod(new JobInPeriodDto() { PeriodId = Period.Id,PeriodName = Period.Name}, ActionEnum.AddJobInPeriod)));
                }
                return addJobInPeriod;
            }
        }

        public ReadOnlyCollection<DataGridCommandViewModel> JobInPeriodCommands
        {
            get
            {
                if (jobInPeriodCommands == null)
                {
                    var cmds = createCommands();
                    jobInPeriodCommands = new ReadOnlyCollection<DataGridCommandViewModel>(cmds);
                }
                return jobInPeriodCommands;
            }
            private set
            {
                this.SetField(p => p.JobInPeriodCommands, ref jobInPeriodCommands, value);
            }

        }
        
        #endregion

        #region Constructors
        public JobInPeriodListVM()
        {
            init();
            //jobInPeriods.Add(new JobInPeriodDto { Id = 4, Job = new JobDto { Name = "شغل 1" } });
        }

        public JobInPeriodListVM(IPeriodController periodController, IPMSController appController,
            IPeriodServiceWrapper jobInPeriodService)
        {
            init();
            this.appController = appController;
            this.jobInPeriodService = jobInPeriodService;
            this.periodController = periodController;

        } 
        #endregion

        #region Methods
        void init()
        {
            DisplayName = "مدیریت شغل در دوره";
            jobInPeriods = new PagedSortableCollectionView<JobInPeriodDto>();
            jobInPeriods.OnRefresh += (s, args) => Load(Period);
        }

        private List<DataGridCommandViewModel> createCommands()
        {
            var filterCommand = new List<DataGridCommandViewModel>();
            appController.PMSActions.Where(a => SelectedJobInPeriod.ActionCodes.Contains((int)a.ActionCode)).ForEach(
                action => filterCommand.Add(new DataGridCommandViewModel
                {

                    CommandViewModel = new CommandViewModel(action.ActionName,
                                                            new DelegateCommand(
                                                                () => action.DoAction(SelectedJobInPeriod),
                                                                () => true)),
                    Icon = action.ActionIcon
                }));

            return filterCommand;
        }

<<<<<<< HEAD
        public void Load(PeriodDto periodDto)
        {
            Period = periodDto;
=======
        public void Load(PeriodDto periodParam)
        {
            Period = periodParam;
>>>>>>> 35cdb324961198748bd407c86d7bb0684fa5eefd
            ShowBusyIndicator("در حال دریافت اطلاعات...");
            jobInPeriodService.GetAllJobInPeriods(
                (res, exp) =>
                {
                    HideBusyIndicator();
                    if (exp == null)
                    {
                        jobInPeriods.SourceCollection = res.Result;
                        jobInPeriods.TotalItemCount = res.TotalCount;
                        jobInPeriods.PageIndex = Math.Max(0, res.CurrentPage - 1);
                    }
                    else appController.HandleException(exp);
                }, jobInPeriods.PageSize, jobInPeriods.PageIndex + 1);
        }

        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (propertyName == "SelectedJobInPeriod" && jobInPeriods.Count > 0)
            {
                JobInPeriodCommands = new ReadOnlyCollection<DataGridCommandViewModel>(createCommands());
                if (View != null)
                    ((JobInPeriodListView)View).CreateContextMenu(JobInPeriodCommands);
            }
        }

        protected override void OnRequestClose()
        {
            base.OnRequestClose();
            appController.Close(this);
        } 
        #endregion

        public void Handle(UpdateJobInPeriodListArgs eventData)
        {
            Load(Period);
        }
    }

}
